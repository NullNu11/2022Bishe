

server.port=4863

#一般用nginx
#server.ssl.key-store:classpath:6210960_yianya.top.pfx
#server.ssl.key-password:Kw27J5gG
#server.ssl.key-store-type:PKCS12
#server.ssl.key-alias:tomcat

#三行    oracle配置
#####################################################
#spring.datasource.url=jdbc:oracle:thin:@//127.0.0.1:1521/orcl
#spring.datasource.username=system
#spring.datasource.password=Oracle501215605
#spring.datasource.driver-class-name=oracle.jdbc.OracleDriver


spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://121.43.117.133:3306/mysql?serverTimezone=GMT%2B8&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=sunAImima1*


spring.servlet.multipart.max-file-size=10MB
#mybatis.mapper-locations=classpath:SendMapper.xml
#mybatis.type-aliases-package=com.example.helloworld.enity


spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
#server.port=4863
#server.ssl.key-store:classpath:6210960_yianya.top.pfx
#server.ssl.key-password:Kw27J5gG
#server.ssl.keyStoreType:PKCS12
# 服务器的HTTP端口，默认为80



spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=none
# Naming strategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect

# 自定义日志目录=级别
logging.level.com.leex=trace


#在控制台输出的日志的格式 同logback
#diyiban
#logging.pattern.console=%d{yyyy-MM-dd} [%thread][%-5level]%logger{50}-%msg%n
#指定文件中日志输出的格式
logging.file.name=F:/logs/springboot.log
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS}   [%thread]   %-5level%logger{50}-%msg%n
#logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(---){faint} %clr(%-80.80logger{79}){cyan} %clr(:){faint} %msg%n
#logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint}   %clr([%thread]){faint} %clr(---){faint} %clr([%level]) %clr(%-80.80logger{79}-){cyan} %clr(%msg%n){faint}
#logging.pattern.console=%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n
logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint}   %clr([%level]) %clr(---){faint} %clr([%thread]){magenta}  %clr(%-80.80logger{79}-){cyan} %clr(%msg%n){faint} 

swagger-config:
   swagger-ui-open:true



#服务名
spring.application.name=service-oss

#环境设置：dev、test、prod
spring.profiles.active=dev

#阿里云 OSS
#不同的服务器，地址不同
#sunai.oss-cn-beijing.aliyuncs.com
aliyun.oss.file.endpoint=oss-cn-beijing.aliyuncs.com
aliyun.oss.file.keyid=LTAI5t69XVZZrjMapZEZc6Rk
aliyun.oss.file.keysecret=PKOJTdtKm6fwt9WbJFlBYfWsa1eh10
#bucket可以在控制台创建，也可以使用java代码创建
aliyun.oss.file.bucketname=sunai

